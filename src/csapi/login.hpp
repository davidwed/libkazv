/******************************************************************************
 * THIS FILE IS GENERATED - ANY EDITS WILL BE OVERWRITTEN
 */

#pragma once

#include "basejob.hpp"
#include "csapi/definitions/wellknown/full.hpp"
#include "csapi/definitions/user_identifier.hpp"

namespace Kazv {

/*! \brief Get the supported login types to authenticate users
 *
 * Gets the homeserver's supported login types to authenticate users. Clients
 * should pick one of these and supply it as the ``type`` when logging in.
 */
class GetLoginFlowsJob : public BaseJob {
public:
  // Inner data structures

/// Gets the homeserver's supported login types to authenticate users. Clients
/// should pick one of these and supply it as the ``type`` when logging in.
    struct LoginFlow
        {
/// The login type. This is supplied as the ``type`` when
/// logging in.
          std::string type;
        
        };


// Construction/destruction

    /// Get the supported login types to authenticate users
    explicit GetLoginFlowsJob(std::string serverUrl
    
      
        );


    // Result properties
        
        

    
/// The homeserver's supported login types
static immer::array<LoginFlow> flows(Response r);

    

    static BaseJob::Body buildBody();
      };

      } 
      namespace nlohmann
      {
      using namespace Kazv;
      template<>
      struct adl_serializer<GetLoginFlowsJob::LoginFlow> {

  static void from_json(const json &jo, GetLoginFlowsJob::LoginFlow& result)
  {
  
    result.type = jo.at("type"s);
  
  }
};
    }

    namespace Kazv
    {

/*! \brief Authenticates the user.
 *
 * Authenticates the user, and issues an access token they can
 * use to authorize themself in subsequent requests.
 * 
 * If the client does not supply a ``device_id``, the server must
 * auto-generate one.
 * 
 * The returned access token must be associated with the ``device_id``
 * supplied by the client or generated by the server. The server may
 * invalidate any access token previously associated with that device. See
 * `Relationship between access tokens and devices`_.
 */
class LoginJob : public BaseJob {
public:


// Construction/destruction

  /*! \brief Authenticates the user.
 *
    * \param type
    *   The login type being used.
    * 
    * \param identifier
    *   Authenticates the user, and issues an access token they can
    *   use to authorize themself in subsequent requests.
    *   
    *   If the client does not supply a ``device_id``, the server must
    *   auto-generate one.
    *   
    *   The returned access token must be associated with the ``device_id``
    *   supplied by the client or generated by the server. The server may
    *   invalidate any access token previously associated with that device. See
    *   `Relationship between access tokens and devices`_.
    * 
    * \param password
    *   Required when ``type`` is ``m.login.password``. The user's
    *   password.
    * 
    * \param token
    *   Required when ``type`` is ``m.login.token``. Part of `Token-based`_ login.
    * 
    * \param deviceId
    *   ID of the client device. If this does not correspond to a
    *   known client device, a new device will be created. The server
    *   will auto-generate a device_id if this is not specified.
    * 
    * \param initialDeviceDisplayName
    *   A display name to assign to the newly-created device. Ignored
    *   if ``device_id`` corresponds to a known device.
    */
    explicit LoginJob(std::string serverUrl
    
      ,
        std::string type , std::optional<UserIdentifier> identifier  = std::nullopt, std::string password  = {}, std::string token  = {}, std::string deviceId  = {}, std::string initialDeviceDisplayName  = {});
    

    // Result properties
        
        

    
/// The fully-qualified Matrix ID for the account.
static std::string userId(Response r);

    
/// An access token for the account.
/// This access token can then be used to authorize other requests.
static std::string accessToken(Response r);

    
/// The server_name of the homeserver on which the account has
/// been registered.
/// 
/// **Deprecated**. Clients should extract the server_name from
/// ``user_id`` (by splitting at the first colon) if they require
/// it. Note also that ``homeserver`` is not spelt this way.
static std::string homeServer(Response r);

    
/// ID of the logged-in device. Will be the same as the
/// corresponding parameter in the request, if one was specified.
static std::string deviceId(Response r);

    
/// Optional client configuration provided by the server. If present,
/// clients SHOULD use the provided object to reconfigure themselves,
/// optionally validating the URLs within. This object takes the same
/// form as the one returned from .well-known autodiscovery.
static std::optional<DiscoveryInformation> wellKnown(Response r);

    

    static BaseJob::Body buildBody(std::string type, std::optional<UserIdentifier> identifier, std::string password, std::string token, std::string deviceId, std::string initialDeviceDisplayName);
      };

      } 
      namespace nlohmann
      {
      using namespace Kazv;
    
    }

    namespace Kazv
    {

} // namespace Kazv
